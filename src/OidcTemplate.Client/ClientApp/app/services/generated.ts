/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { Injector } from "@angular/core";
import { PortalService } from "./portal.service";
import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response, RequestOptionsArgs } from '@angular/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export class ClientBase {
    private portalService: PortalService;
    private baseHttp: Http;

    constructor(private injector: Injector) {
        this.portalService = injector.get(PortalService);
        this.baseHttp = injector.get(Http);
    }

    protected transformOptions(options: any) {
        options.headers.append("Authorization", "Bearer " + this.portalService.appSettings.accessToken);
        return Promise.resolve(options);
    }

    protected transformResult(url: string, response: Response, processor: (response: Response) => any): Observable<any> {
        
        if (response.status === 401) {
            return this.refreshTokens()
                .flatMap((newTokenResponse: ITokenRefresh) => {
                    if (!newTokenResponse || !newTokenResponse.access_token) {
                        // Something's up with the token refresg. Only solution from here is to re-login
                        // Redirect to logout
                        window.location.href = this.portalService.appSettings.baseUrls.web + "/account/logoff";
                        return Observable.throw("Could not refresh authentication token. Redirecting to logout.");
                    }
                    this.portalService.appSettings.accessToken = newTokenResponse.access_token;
                    return processor(response);
                });
        } else {
            return processor(response);
        }
    }
    
    refreshTokens() {
        console.log("Refreshed access token");
        return this.baseHttp.get(this.portalService.appSettings.baseUrls.web + "/Account/RefreshTokens")
            .map((r) => <ITokenRefresh>r.json());
    }
}

@Injectable()
export class SampleDataClient extends ClientBase {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Injector) configuration: Injector, @Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        super(configuration);
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "";
    }

    weatherForecasts(): Observable<WeatherForecast[]> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return Observable.fromPromise(this.transformOptions(options_)).flatMap(transformedOptions_ => {
            return this.http.request(url_, transformedOptions_);
        }).flatMap((response_: any) => {
            return this.transformResult(url_, response_, (r) => this.processWeatherForecasts(<any>r));
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.transformResult(url_, response_, (r) => this.processWeatherForecasts(<any>r));
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>Observable.throw(response_);
        });
    }

    protected processWeatherForecasts(response: Response): Observable<WeatherForecast[]> {
        const status = response.status;

        let _headers: any = response.headers ? response.headers.toJSON() : {};
        if (status === 200) {
            const _responseText = response.text();
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Observable.of<WeatherForecast[]>(<any>null);
    }
}

export class WeatherForecast {
    dateFormatted: string;
    temperatureC: number;
    summary: string;
    temperatureF: number;

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"];
            this.temperatureC = data["temperatureC"];
            this.summary = data["summary"];
            this.temperatureF = data["temperatureF"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted;
        data["temperatureC"] = this.temperatureC;
        data["summary"] = this.summary;
        data["temperatureF"] = this.temperatureF;
        return data; 
    }

    clone() {
        const json = this.toJSON();
        let result = new WeatherForecast();
        result.init(json);
        return result;
    }
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    headers: { [key: string]: any; };
    result: any; 

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return Observable.throw(new SwaggerException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader(); 
            reader.onload = function() { 
                observer.next(this.result);
                observer.complete();
            }
            reader.readAsText(blob); 
        }
    });
}

export interface ITokenRefresh {
    access_token: string;
}